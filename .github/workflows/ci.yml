on:
  push:
    branches:
      - '**'

jobs:
  docker-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Docker compose config
        run: docker compose config
      - name: Verify Dockerfile
        run: |
          DOCKERFILE=Dockerfile
          if [[ ! -f "$DOCKERFILE" ]]; then
            echo "❌ Dockerfile not found!"
            exit 1
          fi
      
          # Check number of stages
          STAGE_COUNT=$(grep -c '^FROM' "$DOCKERFILE")
          echo "✅ Found $STAGE_COUNT stages in the Dockerfile."
          if [[ $STAGE_COUNT -lt 2 ]]; then
            echo "❌ Dockerfile must have at least 2 stages (multi-stage build required)."
            exit 1
          fi
      
          # Check base image
          if ! grep -q '^FROM python:3.11-buster' "$DOCKERFILE"; then
            echo "❌ Base image is not 'python:3.11-buster'"
            exit 1
          else
            echo "✅ Base image is 'python:3.11-buster'"
          fi
      
          # Check WORKDIR
          if ! grep -q '^WORKDIR /app' "$DOCKERFILE"; then
            echo "❌ WORKDIR is not set to '/app'"
            exit 1
          else
            echo "✅ WORKDIR is set to '/app'"
          fi

  integration-test:
    timeout-minutes: 10
    name: integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Docker compose up
        run: docker compose up -d
      - name: Wait for services
        run: |
          while true; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/)
            if [ $STATUS -eq 200 ]; then
              echo "Services are up..."
              break
            fi
          done
      - name: Integration tests
        run: |
          apt install jq -y
          ./tests/api_tests.sh

  deploy:
    runs-on: ubuntu-22.04
    permissions:
      contents: 'read'
      id-token: 'write'
    needs:
      - unit-test
      - integration-test
    steps:
      # checkout code
      - uses: actions/checkout@v4

#      # authenticate with GCP with workload identity provider
#      - uses: 'google-github-actions/auth@v2'
#        id: auth
#        name: Authenticate to GCP
#        with:
#          service_account: 'YOUR SERVICE ACCOUNT e.g. github-actions-service-account@cc-spring2025.iam.gserviceaccount.com'
#          workload_identity_provider: 'YOUR WORKLOAD PROVIDER projects/012345678901/locations/global/workloadIdentityPools/github-actions/providers/dansc0de' # update with your Workload Identity Pool

#      # configure/login with docker
#      - name: gcloud Configure Docker
#        run: gcloud auth configure-docker [YOUR REGION e.g. us-central1]-docker.pkg.dev

#      # setup docker buildx
#      - name: Setup docker buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          platforms: linux/amd64,linux/arm64

#      # build and push the image
#      - name: Build and Push
#        uses: docker/build-push-action@v6
#        with:
#          context: ./
#          file: ./Dockerfile
#          push: true
#          tags: [YOUR REGION e.g. us-central1]-docker.pkg.dev/cc-spring2025/dansc0de/fastapi-server:v2
